//R08_motion_15302
//15302 301 池上蒔典
//作成した動きの内容　下に記述
//工夫した点　下に記述

/*
//作成した動きの内容　//////////////////
それぞれ、三角形について
左クリック　	:　直線を発射
Aキー      	:　マウスを中心に時計回り
Sキー		:　マウスから離れる
Dキー		:　マウスを中心に反時計回り
Wキー		:　マウスに向けて移動


//工夫した点　///////////////
あるゲームの機体の動きを引用しようとした
ゲームへの応用ができるように、ゲームコントロールを行うクラスを配置し、その中で、弾丸、機体といったクラスを管理するようにした。

三角形の動きに関しては、全方向、全方位移動が可能となるようにプログラムした。

各ファイル、クラスの説明
R08_motion...	:　メインメソッド,ドキュメント
STGCtrl		:　このプログラムについて、監視、指示、情報収集といった、全体を制御する役割を担っている
GameObject	:　Person,Bulletについて、共通の法則を格納
Person		:　三角形のように、機体の共通の法則を格納。　小クラスは、実際の機体となる
Bullet		:　直線のように、弾丸の共通の法則を格納。　小クラスは、実際の弾丸となる
database	:　主に基本的な演算を行う関数が格納されている。２点の座標から、方向を出す関数、　回転してが画像を表示する関数がある
data		:　画像が保存されている


//参考にしたもの　/////////////////
http://hakuhin.jp/as/math.html#MATH_01		: 座標からラジアンに変更する方法について
http://yoppa.org/proga10/1190.html		: Processingのオブジェクト指向について
http://www.silversecond.net/contents/game/sylph_dragoon_zero/	: このゲームの動きを実装しようとした


//感想　///////////////////
三角関数を多用し、実際は、計算の方にかかる時間が長かったと思う。
まだ、発展の余地があり、ゲーム制作もこれの拡張で可能だと思う
*/


void setup () {
  
  // set default datas
  imageMode(CENTER);
    
  size (400, 400);
  
  // test 
  stg_ctrl = new STGCtrl();
  hero = new OwnMachine ();
  stg_ctrl.addPerson(hero);
  

}

void draw () {
  background(0);
  
  stg_ctrl.update();
  
  
}

